#!/bin/bash

function show_usage(){
  USAGE="Usage: ${0##*/} [options...]
Options:
-i, --ip=IPADDR               Host IP address (Required)
-p, --worker                  Run as k8s worker
-a, --apiserver-port=PORT     Apiserver port (Default: 6443)
-a, --etcd-port=PORT          etcd client port (Default: 2379)
-v, --version=VERSION         Specify k8s version (Default: 1.4.4)
-r, --registry=REGISTRY       Registry of docker image (Default: 'gcr.io/google_containers')
-h, --help                    This help text
"

  echo "${USAGE}"
}

function get_options(){
  local PROGNAME="${0##*/}"
  local SHORTOPTS="i:wa:v:r:h"
  local LONGOPTS="ip:,apiserver-port:,etcd-port:,worker,version:,registry:,help"
  local PARSED_OPTIONS=""

  PARSED_OPTIONS="$(getopt -o "${SHORTOPTS}" --long "${LONGOPTS}" -n "${PROGNAME}" -- "$@")" || exit 1
  eval set -- "${PARSED_OPTIONS}"

  # extract options and their arguments into variables.
  while true ; do
      case "$1" in
          -i|--ip)
              export EX_IPADDR="$2"
              shift 2
              ;;
          -a|--apiserver-port)
              export EX_APISERVER_PORT="$2"
              shift 2
              ;;
          -a|--etcd-port)
              export EX_ETCD_CLIENT_PORT="$2"
              shift 2
              ;;
          -p|--worker)
              export EX_WORKER="true"
              shift
              ;;
          -v|--version)
              export EX_K8S_VERSION="$2"
              shift 2
              ;;
          -r|--registry)
              export EX_REGISTRY="$2"
              shift 2
              ;;
          -h|--help)
              show_usage
              exit 0
              shift
              ;;
          --)
              shift
              break
              ;;
          *)
              echo "Option error!" 1>&2
              echo $1
              exit 1
              ;;
      esac
  done


  if [[ -z "${EX_IPADDR}" ]] || \
   [[ -z "$(ip addr | sed -nr "s/.*inet ([^ ]+)\/.*/\1/p" | grep -w "${EX_IPADDR}")" ]]; then
    echo "IP address error, exiting..." 1>&2
    exit 1
  fi

  if [[ -z "${EX_APISERVER_PORT}" ]]; then
    export EX_APISERVER_PORT="6443"
  fi

  if [[ -z "${EX_ETCD_CLIENT_PORT}" ]]; then
    export EX_ETCD_CLIENT_PORT="2379"
  fi

  if [[ "${EX_WORKER}" != "true" ]]; then
    export EX_WORKER="false"
  fi

  if [[ -z "${EX_K8S_VERSION}" ]]; then
    export EX_K8S_VERSION="1.4.4"
  fi

  if [[ -z "${EX_REGISTRY}" ]]; then
    export EX_REGISTRY="gcr.io/google_containers"
  fi
}

# Get k8s apiservers form the list of etcd members
function get_API_Servers(){
  local APISERVER_PORT="$1"
  local ETCD_CLIENT_PORT="$2"
  local APISERVERS=""
  local APISERVER=""

  local KUBE_NODE_LIST="$(curl -s 127.0.0.1:${ETCD_CLIENT_PORT}/v2/keys/registry/minions \
                        | jq -r .node.nodes[].value \
                        | jq -r '.status.addresses[] | select(.type == "InternalIP") | .address')"
  if [[ -z "${KUBE_NODE_LIST}" ]]; then exit 1; fi

  for KUBE_NODE in ${KUBE_NODE_LIST}; do
    APISERVER="https://${KUBE_NODE}:${APISERVER_PORT}"
    if curl --insecure -u admin:admin -sf -m 3 "${APISERVER}/healthz" &>/dev/null; then
      APISERVERS="${APISERVERS}","${APISERVER}"
    fi
  done

  APISERVERS="$(echo "${APISERVERS}" | cut -c 2-)"
  echo "${APISERVERS}"
}

function main(){

  get_options "$@"
  local IPADDR="${EX_IPADDR}"
  local WORKER="${EX_WORKER}"
  local APISERVER_PORT="${EX_APISERVER_PORT}"
  local ETCD_CLIENT_PORT="${EX_ETCD_CLIENT_PORT}"
  local ETCD_PROXY=""
  local APISERVER=""
  local APISERVERS=""
  local APISERVER_COUNT=5
  local KUBE_CONF_PATH="/etc/kubernetes/manifests-multi"
  local KUBE_ADDONS_CONF_PATH="/etc/kubernetes/addons/multinode"
  local KUBE_ETC="/etc/kubernetes"
  local KUBELET_VARLIB="/var/lib/kubelet"

  export REGISTRY="${EX_REGISTRY}"
  export ARCH=amd64
  export K8S_VERSION="${EX_K8S_VERSION}"
  export ADDON_MGR_VER=v5.1

  echo "Copy manifests-multi to /etc/kubernetes"

  mkdir -p mkdir -p "${KUBE_CONF_PATH}"
  mkdir -p ${KUBE_ETC}/addons
  mkdir -p "${KUBELET_VARLIB}/kubeconfig"
  mkdir -p "${KUBE_ADDONS_CONF_PATH}"

  cp -rf /go/kube-conf/*.json "${KUBE_CONF_PATH}"
  cp -rf /go/kube-conf/kubeconfig/kubeconfig.yaml "${KUBELET_VARLIB}/kubeconfig"
  cp -rf /go/kube-conf/kubeconfig "${KUBE_ETC}/"
  cp -rf /go/kube-conf/addons "${KUBE_ETC}/"
  cp -f /go/cp-certs.sh "${KUBE_ETC}/"
  cp -f /go/update-addons.sh "${KUBE_ETC}/"
  cp -rf /go/heapster-1.2.0/deploy/kube-config/influxdb "${KUBE_ADDONS_CONF_PATH}/heapster" 

  sed -i "s|REGISTRY|${REGISTRY}|g" "${KUBE_CONF_PATH}"/*.json
  sed -i "s|REGISTRY|${REGISTRY}|g" "${KUBE_ADDONS_CONF_PATH/}"/*.yaml
  sed -i "s|ARCH|${ARCH}|g" "${KUBE_CONF_PATH}"/*.json
  sed -i "s|ARCH|${ARCH}|g" "${KUBE_ADDONS_CONF_PATH/}"/*.yaml
  sed -i "s|VERSION|v${K8S_VERSION}|g" "${KUBE_CONF_PATH}"/*.json
  sed -i "s|VERSION|v${K8S_VERSION}|g" "${KUBE_ADDONS_CONF_PATH/}"/*.yaml
  sed -i "s|\"--master=127.0.0.1:${APISERVER_PORT}\"\,|\"--leader-elect=true\"\,\n              \"--kubeconfig=/srv/kubernetes/kubeconfig.yaml\"\,|g" "${KUBE_CONF_PATH}/master-multi.json"
  sed -i "s|\"--apiserver-count=.*\",|\"--apiserver-count=${APISERVER_COUNT}\",|g" "${KUBE_CONF_PATH}/master-multi.json"
  sed -i "s|ADDON_MGR_VER|${ADDON_MGR_VER}|g" "${KUBE_CONF_PATH}/addon-manager-multinode.json"

  # If etcd is running as a proxy, set k8s as a worker
  local MEMBER_LIST="$(curl -s http://127.0.0.1:${ETCD_CLIENT_PORT}/v2/members)"
  if [[ "${MEMBER_LIST}" == *"${IPADDR}:${ETCD_CLIENT_PORT}"* ]]; then
    ETCD_PROXY="off"
    WORKER="false"
  else
    ETCD_PROXY="on"
    WORKER="true"
  fi

  if [[ "${WORKER}" == "false" ]]; then
    APISERVERS="http://127.0.0.1:8080"
    APISERVER="${APISERVERS}"
  else
    APISERVERS="$(get_API_Servers "${APISERVER_PORT}" "${ETCD_CLIENT_PORT}")" || exit 1
    APISERVER="$(echo "${APISERVERS}" | cut -d ',' -f 1)"

    echo '{}' > "${KUBE_CONF_PATH}/master-multi.json"
    echo '{}' > "${KUBE_CONF_PATH}/addon-manager-multinode.json"
    
  fi
  
  #TODO: Connect the kube-apiserver via public DN with certificate
  sed -i "s|server: https://127.0.0.1:6443|server: ${APISERVER}|g" "${KUBE_ETC}/kubeconfig/kubeconfig.yaml"
  sed -i "s|server: https://127.0.0.1:6443|server: ${APISERVER}|g" "${KUBELET_VARLIB}/kubeconfig/kubeconfig.yaml"
  
  #for exposing kubernetes&kube-dns
  sed -i "s|127.0.0.1|${IPADDR}|g" "${KUBE_ETC}/update-addons.sh"
  sed -i "s|127.0.0.1|${IPADDR}|g" "${KUBE_ETC}/addons/kubernetes-public.yaml"

  until ! docker ps | grep -w 'k8sup-kubelet'; do
    docker stop k8sup-kubelet 1>/dev/null || true
    docker rm k8sup-kubelet 1>/dev/null || true
  done

  echo "Running Kubernetes ..."

  docker run \
      --volume=/:/rootfs:ro \
      --volume=/sys:/sys:ro \
      --volume=/var/lib/docker/:/var/lib/docker:rw \
      --volume=${KUBELET_VARLIB}/:${KUBELET_VARLIB}/:rw,rslave \
      --volume=/var/run:/var/run:rw \
      --volume=/var/run/dbus:/var/run/dbus:rw \
      --volume=/run/flannel:/run/flannel:rw \
      --volume=/dev:/dev:rw \
      --volume=/opt/cni/bin:/opt/cni/bin:rw \
      --volume=/var/lib/cni/:/var/lib/cni:rw \
      --volume=/etc/cni:/etc/cni:rw \
      --volume=${KUBE_ETC}/cp-certs.sh:/cp-certs.sh \
      --volume=${KUBE_CONF_PATH}/master-multi.json:${KUBE_CONF_PATH}/master-multi.json \
      --volume=${KUBE_CONF_PATH}/addon-manager-multinode.json:${KUBE_CONF_PATH}/addon-manager-multinode.json \
      --net=host \
      --privileged=true \
      --pid=host \
      --restart=always \
      --name=k8sup-kubelet \
      -d \
      "${REGISTRY}/hyperkube-amd64:v${K8S_VERSION}" \
      /hyperkube kubelet \
          --allow-privileged=true \
          --require-kubeconfig=true \
          --kubeconfig=${KUBELET_VARLIB}/kubeconfig/kubeconfig.yaml \
          --v=2 \
          --address=0.0.0.0 \
          --enable-server \
          --hostname-override="${IPADDR}" \
          --pod-manifest-path=${KUBE_CONF_PATH} \
          --containerized \
          --network-plugin=cni \
          --network-plugin-dir=/etc/cni/net.d \
          --cluster-dns=10.0.0.10 \
          --cluster-domain=cluster.local

  echo "Waiting for any k8s apiserver connected..."
  until curl --insecure -u admin:admin -sf "${APISERVER}/healthz" &>/dev/null; do
    sleep 1
  done

  # Try to set this node as schedulable
  echo "Uncordoning this node..."
  until docker run \
    --net=host \
    --rm=true \
    "${REGISTRY}/hyperkube-amd64:v${K8S_VERSION}" \
    /hyperkube kubectl -s "${APISERVER}" \
    uncordon "${IPADDR}" &>/dev/null; do
      sleep 5
  done
}

main "$@"
